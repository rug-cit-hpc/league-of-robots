#
# Install webserver and deploy cluster specific documentation on that web server.
#
---
- name: 'Check if rsync >= 3.1.2 is installed on the control host.'
  shell: |
         rsync --version  2>&1 | head -n 1 | sed 's|^rsync *version *\([0-9\.]*\).*$|\1|' | tr -d '\n'
  args:
    warn: no
  changed_when: false
  failed_when: false
  check_mode: no
  register: rsync_version
  delegate_to: localhost
- name: 'Abort when modern rsync >= 3.1.2 is missing on control host.'
  debug:
    msg: "FATAL: Need rsync >= 3.1.2 on the control host, but detected {{ rsync_version.stdout }}."
  when:         'rsync_version is failed or (rsync_version.stdout is version_compare("3.1.2", operator="<"))'
  failed_when: 'rsync_version is failed or (rsync_version.stdout is version_compare("3.1.2", operator="<"))'
  delegate_to: localhost

#
# This is currently problematic when
# * the default user used to login to the cluster is different from 
# * the default user used to login on the webserver where the docs are hosted
# as you van specify only one account name with -u on the commandline when running ansible-playbook.
#
- name: 'Gather facts from hosts, so we can use them in the generated docs.'
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items:
    - "{{ groups['jumphost'] }}"
    - "{{ groups['user-interface'] }}"

- name: 'Get Slurm version from scontrol on UI.'
  shell: |
         scontrol version | head -n 1 | sed 's|^slurm *\([0-9\.]*\).*$|\1|' | tr -d '\n'
  args:
    executable: /bin/bash
    warn: no
  environment:
    SOURCE_HPC_ENV: "True"   # Required to source our modules.bashrc in non-interactive shells.
  delegate_to: "{{ groups['user-interface'] | first }}"
  changed_when: false
  failed_when: false
  check_mode: no
  register: slurm_version

- name: 'Get Lmod version from UI.'
  #
  # Example output:
  # Modules based on Lua: Version 6.5.8  2016-09-03 13:41 -05:00 (CDT)
  #    by Robert McLay mclay@tacc.utexas.edu
  #
  shell: |
         unset MODULEPATH
         source ~/.modulesrc >/dev/null 2>&1
         lmod -v | sed '/^$/d' | sed 's|^.*Version \([0-9\.]*\).*$|\1|' | head -1
  args:
    executable: /bin/bash
    warn: no
  environment:
    SOURCE_HPC_ENV: "True"   # Required to source our modules.bashrc in non-interactive shells.
  delegate_to: "{{ groups['user-interface'] | first }}"
  changed_when: false
  failed_when: false
  check_mode: no
  register: lmod_version

- name: 'Install libselinux-python.'
  yum:
    state: latest
    update_cache: yes
    name:
      - libselinux-python
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == "6"
  become: true

- name: 'Set selinux in permissive mode.'
  selinux:
    policy: targeted
    state: permissive
  become: true

- name: 'Install EPEL repo and rsync.'
  yum:
    state: latest
    update_cache: yes
    name:
      - epel-release
      - rsync
  become: true

- name: 'Install webserver and php.'
  yum:
    state: latest
    update_cache: yes
    name:
      - php
      - httpd
  notify:
    - restart_httpd
  become: true

- name: 'Enable webserver.'
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - httpd
  become: true

- name: 'Install MkDocs on RedHat 6.x.'
  include_tasks:
    file: "{{ playbook_dir }}/roles/online_docs/tasks/mkdocs-for-redhat6.yml"
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == "6"

- name: 'Install MkDocs on RedHat 7.x.'
  include_tasks:
    file: "{{ playbook_dir }}/roles/online_docs/tasks/mkdocs-for-redhat7.yml"
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == "7"

- name: 'Create base directories for MarkDown and HTML files on webserver.'
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  with_items:
    - "/srv/mkdocs/{{ slurm_cluster_name }}/"
    - "/var/www/html/{{ slurm_cluster_name }}/"
  become: true

- name: 'Create static files for index in document root on webserver.'
  synchronize:
    src: "{{ playbook_dir }}/roles/online_docs/files/index//./{{ item.src }}"
    dest: "/var/www/html/"
    owner: 'no'
    group: 'no'
    use_ssh_args: 'yes'
    rsync_opts:
      # --omit-dir-times  Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      # --chmod           Is required to prevent errors when the perms on the source are not what is required/expected on the destination.
      #                   Fixing perms on the source would be good, but that may be out of our control.
      #                   In that case --chmod ensures we get what we want on the destination.
      #                   Works only when combined with --perms.
      # --force           Is required when symlinks have changed into dirs/files or vice versa.
      #                   In that case the wrong outdated stuff has to be deleted on the destination first before the new stuff can be created.
      #                   Deleting the outdated stuff may fail without --force.
      # --relative        In combination with a "source_server:some/path/not/created/on/destination/./path/created/on/destination/some_file" (dot dir)
      #                   recreates a partial dir structure on the destination relative to the /./ dir, when it does not already exist.
      #                   Without this combination of --relative and dot dir rsync will error when the path does not exist on the destination.
      #                   IMPORTANT: src and dest paths must be absolute paths. Otherwise Ansible will expand the path itself which will remove the /./ dir.
      - '--relative'
      - '--omit-dir-times'
      - '--chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r'
      - '--perms'
      - '--force'
  with_items:
    - src: 'index.php'
    - src: 'sitemap.php'
  become: true

- name: 'Create sub directory structure for MarkDown files on webserver.'
  file:
    path: "/srv/mkdocs/{{ slurm_cluster_name }}/{{ item.path }}"
    state: directory
    owner: root
    group: root
    mode: '0700'
  with_filetree: 'templates/mkdocs'
  when: item.state == 'directory'
  notify:
    - build_mkdocs
  become: true

- name: 'Create static files for MarkDown on webserver.'
  synchronize:
    src: "{{ playbook_dir }}/roles/online_docs/files/mkdocs/docs/./{{ item.src }}"
    dest: "/srv/mkdocs/{{ slurm_cluster_name }}/docs/"
    owner: 'no'
    group: 'no'
    use_ssh_args: 'yes'
    rsync_opts:
      # --omit-dir-times  Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      # --omit-link-times Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      #                   Requires rsync >= 3.1.2 (default on Enterprise Linux >= 7.x).
      # --chmod           Is required to prevent errors when the perms on the source are not what is required/expected on the destination.
      #                   Fixing perms on the source would be good, but that may be out of our control.
      #                   In that case --chmod ensures we get what we want on the destination.
      #                   Works only when combined with --perms.
      # --force           Is required when symlinks have changed into dirs/files or vice versa.
      #                   In that case the wrong outdated stuff has to be deleted on the destination first before the new stuff can be created.
      #                   Deleting the outdated stuff may fail without --force.
      # --relative        In combination with a "source_server:some/path/not/created/on/destination/./path/created/on/destination/some_file" (dot dir)
      #                   recreates a partial dir structure on the destination relative to the /./ dir, when it does not already exist.
      #                   Without this combination of --relative and dot dir rsync will error when the path does not exist on the destination.
      #                   IMPORTANT: src and dest paths must be absolute paths. Otherwise Ansible will expand the path itself which will remove the /./ dir.
      - '--relative'
      - '--omit-dir-times'
      #- '--omit-link-times'
      - '--chmod=Du=rwx,Dgo-rwx,Fu=rw,Fgo-rwx'
      - '--perms'
      - '--force'
  with_items:
    - src: 'css'
    - src: 'img'
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] < "7"
  notify:
    - build_mkdocs
  become: true

- name: 'Create static files for MarkDown on webserver.'
  synchronize:
    src: "{{ playbook_dir }}/roles/online_docs/files/mkdocs/docs/./{{ item.src }}"
    dest: "/srv/mkdocs/{{ slurm_cluster_name }}/docs/"
    owner: 'no'
    group: 'no'
    use_ssh_args: 'yes'
    rsync_opts:
      # --omit-dir-times  Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      # --omit-link-times Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      #                   Requires rsync >= 3.1.2 (default on Enterprise Linux >= 7.x).
      # --chmod           Is required to prevent errors when the perms on the source are not what is required/expected on the destination.
      #                   Fixing perms on the source would be good, but that may be out of our control.
      #                   In that case --chmod ensures we get what we want on the destination.
      #                   Works only when combined with --perms.
      # --force           Is required when symlinks have changed into dirs/files or vice versa.
      #                   In that case the wrong outdated stuff has to be deleted on the destination first before the new stuff can be created.
      #                   Deleting the outdated stuff may fail without --force.
      # --relative        In combination with a "source_server:some/path/not/created/on/destination/./path/created/on/destination/some_file" (dot dir)
      #                   recreates a partial dir structure on the destination relative to the /./ dir, when it does not already exist.
      #                   Without this combination of --relative and dot dir rsync will error when the path does not exist on the destination.
      #                   IMPORTANT: src and dest paths must be absolute paths. Otherwise Ansible will expand the path itself which will remove the /./ dir.
      - '--relative'
      - '--omit-dir-times'
      - '--omit-link-times'
      - '--chmod=Du=rwx,Dgo-rwx,Fu=rw,Fgo-rwx'
      - '--perms'
      - '--force'
  with_items:
    - src: 'css'
    - src: 'img'
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] >= "7"
  notify:
    - build_mkdocs
  become: true

- name: 'Create MarkDown files based on templates on webserver.'
  template:
    src: "{{ item.src }}"
    dest: "/srv/mkdocs/{{ slurm_cluster_name }}/{{ item.path }}"
    owner: root
    group: root
    mode: '0600'
  with_filetree: 'templates/mkdocs'
  # Exclude temporary *.html preview files, which are also exlcuded in .gitignore and should not be transferred.
  when: item.state == 'file' and '.md.html' not in item.path
  notify:
    - build_mkdocs
  become: true
...
