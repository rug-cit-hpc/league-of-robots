#
# Install webserver and deploy cluster specific documentation on that web server.
#
---
- name: 'Check OS version of target host.'
  ansible.builtin.fail:
    msg: 'This role requires RedHat/CentOS version >= 9.x'
  when: ansible_facts['os_family'] != "RedHat" or ansible_facts['distribution_major_version'] < "9"

#
# This is currently problematic when
# * the default user used to login to the cluster is different from
# * the default user used to login on the webserver where the docs are hosted
# as you can specify only one account name with -u on the commandline when running ansible-playbook.
# This is also problematic when
# * the path to the python interpreter used on the cluster machines is different from
# * the path to the python interpreter used on the webserver where the docs are hosted.
#
- name: 'Gather facts from hosts, so we can use them in the generated docs.'
  ansible.builtin.setup:
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items:
    - "{{ groups['jumphost'] }}"
    - "{{ groups['user_interface'] }}"
    - "{{ groups['compute_node'] }}"

- name: 'Get Slurm version from scontrol on UI.'
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      scontrol version | head -n 1 | sed 's|^slurm *\([0-9\.]*\).*$|\1|' | tr -d '\n'
  args:
    executable: '/bin/bash'
  environment:
    SOURCE_HPC_ENV: "True"   # Required to source our modules.bashrc in non-interactive shells.
  delegate_to: "{{ groups['user_interface'] | first }}"
  changed_when: false
  check_mode: false
  register: 'slurm_version'

- name: 'Get Lmod version from UI.'
  #
  # Example output:
  # Modules based on Lua: Version 6.5.8  2016-09-03 13:41 -05:00 (CDT)
  #    by Robert McLay mclay@tacc.utexas.edu
  #
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      unset MODULEPATH
      source /etc/skel/.bashrc >/dev/null 2>&1
      lmod -v | sed '/^$/d' | sed 's|^.*Version \([0-9\.]*\).*$|\1|' | head -1
  args:
    executable: '/bin/bash'
  environment:
    SOURCE_HPC_ENV: "True"   # Required to source our modules.bashrc in non-interactive shells.
  delegate_to: "{{ groups['user_interface'] | first }}"
  changed_when: false
  check_mode: false
  register: 'lmod_version'

- name: 'Get host key fingeprints from dedicated data transfer server.'
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      ssh-keygen -lf <(ssh-keyscan {{ groups['data_transfer'] | first }} 2>/dev/null) \
        | awk '{print $2,$4}'
  args:
    executable: '/bin/bash'
  delegate_to: "{{ groups['jumphost'] | first }}"
  changed_when: false
  check_mode: false
  register: 'data_transfer_host_key_fingerprints'
  when:
    - groups['data_transfer'] is defined
    - groups['data_transfer'] | first is defined
    - groups['data_transfer'] | first | length >= 1

- name: 'Set selinux in permissive mode.'
  ansible.posix.selinux:
    policy: 'targeted'
    state: 'permissive'
  become: true

- name: 'Install rsync.'
  ansible.builtin.package:
    state: 'latest'
    update_cache: true
    name:
      - 'rsync'
  become: true

- name: 'Install nano, PHP, Pythopn and Apache webserver.'
  ansible.builtin.package:
    state: 'latest'
    update_cache: true
    name:
      - 'nano'
      - 'php'
      - 'python3'
      - 'python3-pip'
      - 'python3-jinja2'
      - 'python3-markupsafe'
      - 'httpd'
      - 'mod_ssl'
  notify:
    - 'restart_httpd'
  become: true

#
# The *.pem file with crt as well as key must be copied to the server manually.
#
- name: 'Check if *.gcc.rug.nl wildcard certificate was installed on server.'
  ansible.builtin.file:
    path: '/etc/pki/tls/private/wildcard_crt_and_key.pem'
    state: 'file'
    owner: 'root'
    group: 'root'
    mode: '0600'
  notify:
    - 'restart_httpd'
  become: true

- name: 'Create symlinks for Apache httpd, so it can find the cert & key in the *.gcc.rug.nl wildcard certificate file.'
  ansible.builtin.file:  # noqa risky-file-permissions
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: 'link'
    owner: 'root'
    group: 'root'
    force: true
  loop:
    - dest: '/etc/pki/tls/private/localhost.key'
      src: '/etc/pki/tls/private/wildcard_crt_and_key.pem'
    - dest: '/etc/pki/tls/certs/localhost.crt'
      src: '/etc/pki/tls/private/wildcard_crt_and_key.pem'
    - dest: '/etc/pki/tls/certs/server-chain.crt'
      src: '/etc/pki/tls/private/wildcard_crt_and_key.pem'
  loop_control:
    label: "{{ item.dest }} -> {{ item.src }}"
  notify:
    - 'restart_httpd'
  become: true

- name: 'Configure SSL options in /etc/httpd/conf.d/ssl.conf'
  ansible.builtin.lineinfile:
    path: '/etc/httpd/conf.d/ssl.conf'
    insertafter: '^<VirtualHost.*>'
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop:
    - regexp: '^#?SSLCertificateKeyFile'
      line: 'SSLCertificateKeyFile /etc/pki/tls/private/localhost.key'
    - regexp: '^#?SSLCertificateFile'
      line: 'SSLCertificateFile /etc/pki/tls/certs/localhost.crt'
    - regexp: '^#?SSLCertificateChainFile'
      line: 'SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt'
    - regexp: '^#?ServerName'
      line: "ServerName {{ all_ip_addresses[inventory_hostname].values()
                           | selectattr('fqdn', 'defined')
                           | map(attribute='fqdn')
                           | first }}"
    - regexp: '^#?SSLProtocol .*'
      line: 'SSLProtocol  all -SSLv3 -TLSv1 -TLSv1.1 -TLSv1.2'
  loop_control:
    label: "{{ item.line }}"
  notify:
    - 'restart_httpd'
  become: true

- name: 'Configure Apache webserver to redirect HTTP to HTTPS.'
  ansible.builtin.template:
    src: 'templates/apache/redirect_all_http_to_https.conf'
    dest: '/etc/httpd/conf.d/redirect_all_http_to_https.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify:
    - 'restart_httpd'
  become: true

- name: 'Enable webserver.'
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: true
    state: 'started'
  with_items:
    - 'httpd'
  become: true

- name: 'Install MkDocs and deps using pip.'
  ansible.builtin.pip:
    name:
      - 'MarkupSafe<2.1'  # Newer MarkupSafe is incompatible with python3-jinja2 2.11.3 RPM on Rocky 9.
      - 'mkdocs'
    executable: 'pip3'
    state: 'latest'
  become: true

- name: 'Create base directories for MarkDown and HTML files.'
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: "{{ item.mode }}"
  with_items:
    - path: "/srv/mkdocs/{{ slurm_cluster_name }}/"
      mode: '0750'
    - path: "/srv/mkdocs/{{ slurm_cluster_name }}/tmp/"
      mode: '0750'
    - path: "/srv/mkdocs/{{ slurm_cluster_name }}/docs/"
      mode: '0750'
    - path: "/srv/mkdocs/{{ slurm_cluster_name }}/docs/attachments"
      mode: '0750'
    - path: "/var/www/html/{{ slurm_cluster_name }}/"
      mode: '0755'
    - path: "/var/www/html/{{ slurm_cluster_name }}/attachments/"
      mode: '0755'
  become: true

- name: 'Create static files for index in document root.'
  ansible.posix.synchronize:
    src: "{{ playbook_dir }}/roles/online_docs/files/index//./{{ item.src }}"
    dest: "/var/www/html/"
    owner: 'no'
    group: 'no'
    # Temporarily disabled as it is broken in Mitogen 0.3.3. Fix is already merged and will be in next Mitogen version.
    # use_ssh_args: true
    ssh_connection_multiplexing: true
    rsync_opts:
      # --omit-dir-times  Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      # --chmod           Is required to prevent errors when the perms on the source are not what is required/expected on the destination.
      #                   Fixing perms on the source would be good, but that may be out of our control.
      #                   In that case --chmod ensures we get what we want on the destination.
      #                   Works only when combined with --perms.
      # --force           Is required when symlinks have changed into dirs/files or vice versa.
      #                   In that case the wrong outdated stuff has to be deleted on the destination first before the new stuff can be created.
      #                   Deleting the outdated stuff may fail without --force.
      # --relative        In combination with a "source_server:some/path/not/created/on/destination/./path/created/on/destination/some_file" (dot dir)
      #                   recreates a partial dir structure on the destination relative to the /./ dir, when it does not already exist.
      #                   Without this combination of --relative and dot dir rsync will error when the path does not exist on the destination.
      #                   IMPORTANT: src and dest paths must be absolute paths. Otherwise Ansible will expand the path itself which will remove the /./ dir.
      - '--relative'
      - '--omit-dir-times'
      - '--chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r'
      - '--perms'
      - '--force'
  with_items:
    - src: 'index.php'
    - src: 'sitemap.php'
  become: true

- name: 'Create sub directory structure for MarkDown files.'
  ansible.builtin.file:
    path: "/srv/mkdocs/{{ slurm_cluster_name }}/{{ item.path }}"
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0750'
  with_community.general.filetree: "{{ playbook_dir }}/roles/online_docs/templates/mkdocs"
  when: item.state == 'directory'
  notify:
    - 'build_mkdocs'
  become: true

- name: 'Create static files for MarkDown.'
  ansible.posix.synchronize:
    src: "{{ playbook_dir }}/roles/online_docs/files/mkdocs/docs/./{{ item.src }}"
    dest: "/srv/mkdocs/{{ slurm_cluster_name }}/docs/"
    owner: 'no'
    group: 'no'
    # Temporarily disabled as it is broken in Mitogen 0.3.3. Fix is already merged and will be in next Mitogen version.
    # use_ssh_args: true
    ssh_connection_multiplexing: true
    rsync_opts:
      # --omit-dir-times  Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      # --omit-link-times Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      #                   Requires rsync >= 3.1.2 (default on Enterprise Linux >= 7.x).
      # --chmod           Is required to prevent errors when the perms on the source are not what is required/expected on the destination.
      #                   Fixing perms on the source would be good, but that may be out of our control.
      #                   In that case --chmod ensures we get what we want on the destination.
      #                   Works only when combined with --perms.
      # --force           Is required when symlinks have changed into dirs/files or vice versa.
      #                   In that case the wrong outdated stuff has to be deleted on the destination first before the new stuff can be created.
      #                   Deleting the outdated stuff may fail without --force.
      # --relative        In combination with a "source_server:some/path/not/created/on/destination/./path/created/on/destination/some_file" (dot dir)
      #                   recreates a partial dir structure on the destination relative to the /./ dir, when it does not already exist.
      #                   Without this combination of --relative and dot dir rsync will error when the path does not exist on the destination.
      #                   IMPORTANT: src and dest paths must be absolute paths. Otherwise Ansible will expand the path itself which will remove the /./ dir.
      - '--relative'
      - '--omit-dir-times'
      - '--omit-link-times'
      - '--chmod=Du=rwx,Dg=rx,Do-rwx,Fu=rwX,Fug=rX,Fo-rwx'
      - '--perms'
      - '--force'
  with_items:
    - src: 'css'
    - src: 'img'
  notify:
    - 'build_mkdocs'
  become: true

- name: 'Create skeleton for AppleScript apps.'
  ansible.posix.synchronize:
    src: "{{ playbook_dir }}/roles/online_docs/files/attachments/{{ item.src }}/./"
    dest: "/srv/mkdocs/{{ slurm_cluster_name }}/tmp/{{ item.dest }}"
    owner: 'no'
    group: 'no'
    # Temporarily disabled as it is broken in Mitogen 0.3.3. Fix is already merged and will be in next Mitogen version.
    # use_ssh_args: true
    ssh_connection_multiplexing: true
    recursive: 'yes'
    rsync_opts:
      - '--relative'
      - '--omit-dir-times'
      - '--omit-link-times'
      - '--chmod=Du=rwx,Dg=rx,Do-rwx,Fu=rwX,Fg=rX,Fo-rwx'
      - '--perms'
      - '--force'
  with_items:
    - src: 'ssh-client-config.app'
      dest: "ssh-client-config-for-{{ slurm_cluster_name }}.app"
    - src: 'mount-cluster-drives.app'
      dest: 'mount-cluster-drives.app'
  notify:
    - 'zip_attachments'
    - 'build_mkdocs'
  become: true

- name: 'Make sure main script of AppleScript apps are executable.'
  ansible.builtin.file:
    path: "/srv/mkdocs/{{ slurm_cluster_name }}/tmp/{{ item }}/Contents/MacOS/applet"
    state: 'file'
    owner: 'root'
    group: 'root'
    mode: '0750'
  with_items:
    - "ssh-client-config-for-{{ slurm_cluster_name }}.app"
    - 'mount-cluster-drives.app'
  notify:
    - 'zip_attachments'
    - 'build_mkdocs'
  become: true

- name: 'Create files for attachments based on templates.'
  ansible.builtin.template:
    src: "attachments/{{ item.src }}"
    dest: "/srv/mkdocs/{{ slurm_cluster_name }}/tmp/{{ item.dest }}"
    owner: 'root'
    group: 'root'
    mode: "{{ item.mode }}"
  with_items:
    #
    # For macOS users we inject the configuration script for this cluster into the AppleScript app skeleton.
    #
    - src: 'ssh-client-config.bash'
      dest: "ssh-client-config-for-{{ slurm_cluster_name }}.app/Contents/MacOS/ssh-client-config.command"
      mode: '0750'
    #
    # For Linux/Unix users: just generate a bare Bash script.
    #
    - src: 'ssh-client-config.bash'
      dest: "ssh-client-config-for-{{ slurm_cluster_name }}.bash"
      mode: '0750'
  notify:
    - 'zip_attachments'
    - 'build_mkdocs'
  become: true

- name: 'Create MarkDown files based on templates.'
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/srv/mkdocs/{{ slurm_cluster_name }}/{{ item.path }}"
    owner: 'root'
    group: 'root'
    mode: '0640'
  with_community.general.filetree: "{{ playbook_dir }}/roles/online_docs/templates/mkdocs"
  # Exclude temporary *.html preview files, which are also exlcuded in .gitignore and should not be transferred.
  when: item.state == 'file' and '.md.html' not in item.path
  notify:
    - 'build_mkdocs'
  become: true
...
