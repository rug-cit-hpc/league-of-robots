---
# Checking all resources
- name: Check if server_config.json contains rule engine for unified storage
  ansible.builtin.command: 'fgrep "irods_rule_engine_plugin-unified_storage_tiering-instance" /etc/irods/server_config.json'
  changed_when: false
  failed_when: >
    check_unified_storage.rc != 0 and '"irods_rule_engine_plugin-unified_storage_tiering-instance"
    is missing in check_unified_storage.stdout'
  become_user: '{{ ir_service_account }}'
  become: true
  register: check_unified_storage

- name: Get status of {{ ir_local_stage_res }} resource
  ansible.builtin.command: 'ilsresc {{ ir_local_stage_res }} '
  changed_when: false
  register: check_local_stage_resc
  failed_when: 'check_local_stage_resc.rc > 1'
  become_user: '{{ ir_service_account }}'
  become: true

- name: Make {{ ir_local_stage_res }} resource folder for Vault
  ansible.builtin.file:
    path: '{{ ir_local_stage_res_fol }}'
    state: directory
    mode: '0700'
    owner: '{{ ir_service_account }}'
    group: '{{ ir_service_account }}'
    recurse: true
  become: true
  when: check_local_stage_resc.rc == 1
  register: make_stage_vault_folder

- name: Make local {{ ir_local_stage_res }} resource
  ansible.builtin.shell: >-
    iadmin mkresc {{ ir_local_stage_res }} unixfilesystem
    $(/usr/bin/hostname):{{ ir_local_stage_res_fol }}
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_local_stage_res
  failed_when: make_local_stage_res.rc != 0
  when: check_local_stage_resc.rc == 1

- name: Get status of {{ ir_local_perm_res }} resource
  ansible.builtin.command: 'ilsresc {{ ir_local_perm_res }} '
  changed_when: false
  failed_when: check_local_perm_res.rc != 0 and check_local_perm_res.rc != 1
  become_user: '{{ ir_service_account }}'
  become: true
  register: check_local_perm_res

- name: Make {{ ir_local_perm_res }} resource folder for Vault
  ansible.builtin.file:
    path: '{{ ir_local_perm_res_fol }}'
    state: directory
    mode: '0700'
    owner: '{{ ir_service_account }}'
    group: '{{ ir_service_account }}'
    recurse: true
  become: true
  when: check_local_perm_res.rc == 1
  register: make_perm_vault_folder

- name: Make local {{ ir_local_perm_res }} resource
  ansible.builtin.command: >-
    iadmin mkresc {{ ir_local_perm_res }} unixfilesystem
    $(hostname):{{ ir_local_perm_res_fol }}
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_local_perm_res
  failed_when: make_local_perm_res.rc != 0
  when: check_local_perm_res.rc == 1

# Check tiering groups
- name: Check if storage_tiering group was defined for {{ ir_local_res }} resource
  ansible.builtin.command: imeta ls -R {{ ir_local_res }} irods::storage_tiering::group
  changed_when: false
  become_user: '{{ ir_service_account }}'
  become: true
  register: check_imeta_tiering_group
  failed_when: check_imeta_tiering_group.rc != 0

- name: Make storage_tiering group for {{ ir_local_res }}
  ansible.builtin.command: >-
    imeta add -R {{ ir_local_res }} irods::storage_tiering::group tiergroup 0
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_local_tiering_group
  failed_when: make_local_tiering_group.rc != 0
  when: 'check_imeta_tiering_group.stdout is not search("attribute: irods::storage_tiering::group")'

# Tiering group
- name: Check if storage_tiering group was defined for {{ ir_local_stage_res }} resource
  ansible.builtin.command: >-
    imeta ls -R {{ ir_local_stage_res }} irods::storage_tiering::group
  changed_when: false
  failed_when: check_imeta_tiering_staging_group.rc != 0
  become_user: '{{ ir_service_account }}'
  become: true
  when: ir_local_stage_res is defined
  register: check_imeta_tiering_staging_group

- name: Make storage_tiering group for {{ ir_local_stage_res }}
  ansible.builtin.command: >-
    imeta add -R {{ ir_local_stage_res }} irods::storage_tiering::group tiergroup 1
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_local_stage_tiering_group
  failed_when: make_local_stage_tiering_group.rc != 0
  when: 'check_imeta_tiering_staging_group.stdout is not search("attribute: irods::storage_tiering::group")'

- name: Check if storage_tiering group was defined for {{ ir_local_perm_res }} resource
  ansible.builtin.command: imeta ls -R {{ ir_local_perm_res }} irods::storage_tiering::group
  changed_when: false
  become_user: '{{ ir_service_account }}'
  become: true
  when: ir_local_perm_res is defined
  register: check_imeta_tiering_perm_group
  failed_when: check_imeta_tiering_perm_group.rc != 0

- name: Make storage_tiering group for {{ ir_local_perm_res }}
  ansible.builtin.command: >-
    imeta add -R {{ ir_local_perm_res }} irods::storage_tiering::group tiergroup 2
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_local_perm_tiering_group
  failed_when: make_local_perm_tiering_group.rc != 0
  when: 'check_imeta_tiering_perm_group.stdout is not search("attribute: irods::storage_tiering::group")'

- name: Check if storage_tiering time was defined for {{ ir_local_res }} resource
  ansible.builtin.command: >-
    imeta ls -R {{ ir_local_res }} irods::storage_tiering::time
  changed_when: false
  become_user: '{{ ir_service_account }}'
  become: true
  register: check_imeta_tiering_time
  failed_when: check_imeta_tiering_time.rc != 0

- name: Make storage_tiering time for {{ ir_local_res }}
  ansible.builtin.command: >-
    imeta add -R {{ ir_local_res }} irods::storage_tiering::time 60
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_local_tiering_time
  failed_when: make_local_tiering_time.rc != 0
  when: 'check_imeta_tiering_time.stdout is not search("attribute: irods::storage_tiering::time")'

- name: Check if storage_tiering time was defined for {{ ir_local_stage_res }} resource
  ansible.builtin.command: imeta ls -R {{ ir_local_stage_res }} irods::storage_tiering::time
  changed_when: false
  become_user: '{{ ir_service_account }}'
  become: true
  register: check_imeta_staging_tiering_time
  failed_when: check_imeta_staging_tiering_time.rc != 0

- name: Make storage_tiering time for {{ ir_local_res }}
  ansible.builtin.command: >-
    imeta add -R {{ ir_local_stage_res }} irods::storage_tiering::time 300
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_local_staging_tiering_time
  failed_when: make_local_staging_tiering_time.rc != 0
  when: 'check_imeta_staging_tiering_time.stdout is not search("attribute: irods::storage_tiering::time")'

- name: Check if storage_tiering minimum_delay_time_in_seconds was defined for {{ ir_local_res }} resource
  ansible.builtin.command: >
    imeta ls -R {{ ir_local_res }} irods::storage_tiering::minimum_delay_time_in_seconds
  changed_when: false
  become_user: '{{ ir_service_account }}'
  become: true
  register: check_imeta_tiering_min_delay_time
  failed_when: check_imeta_tiering_min_delay_time.rc != 0

- name: Make storage_tiering minimum_delay_time for {{ ir_local_res }}
  ansible.builtin.command: >-
    imeta add -R {{ ir_local_res }} irods::storage_tiering::minimum_delay_time_in_seconds 1
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_local_tiering_mindelaytime
  failed_when: make_local_tiering_mindelaytime.rc != 0
  when: 'check_imeta_tiering_min_delay_time.stdout is not search("attribute: irods::storage_tiering::minimum_delay_time_in_seconds")'

- name: Check if storage_tiering maximum_delay_time_in_seconds was defined for {{ ir_local_res }} resource
  ansible.builtin.command:
    imeta ls -R {{ ir_local_res }} irods::storage_tiering::maximum_delay_time_in_seconds
  changed_when: false
  become_user: '{{ ir_service_account }}'
  become: true
  register: check_imeta_tiering_max_delay_time
  failed_when: check_imeta_tiering_max_delay_time.rc != 0

- name: Make storage_tiering maximum_delay_time for {{ ir_local_res }}
  ansible.builtin.command: >-
    imeta add -R {{ ir_local_res }} irods::storage_tiering::maximum_delay_time_in_seconds 30
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_local_tiering_maxdelaytime
  failed_when: make_local_tiering_maxdelaytime.rc != 0
  when: 'check_imeta_tiering_max_delay_time.stdout is not search("attribute: irods::storage_tiering::maximum_delay_time_in_seconds")'

- name: Check if storage_tiering minimum_restage_tier was defined for {{ ir_local_stage_res }} resource
  ansible.builtin.command: >-
    imeta ls -R {{ ir_local_stage_res }} irods::storage_tiering::minimum_restage_tier
  changed_when: false
  become_user: '{{ ir_service_account }}'
  become: true
  register: check_imeta_staging_minimum_restage
  failed_when: check_imeta_staging_minimum_restage.rc != 0

- name: Make storage_tiering minimum_restage_tier for {{ ir_local_stage_res }}
  ansible.builtin.command: >-
    imeta add -R {{ ir_local_stage_res }} irods::storage_tiering::minimum_restage_tier true
  become_user: '{{ ir_service_account }}'
  become: true
  register: make_minimum_restage_tier
  failed_when: make_minimum_restage_tier.rc != 0
  when: 'check_imeta_staging_minimum_restage.stdout is not search("attribute: irods::storage_tiering::minimum_restage_tier")'

- name: Get all pending rules from the iRODS rule execution list
  ansible.builtin.command: iqstat
  changed_when: false
  become_user: '{{ ir_service_account }}'
  become: true
  register: check_iqstat
  failed_when: check_iqstat.rc != 0

- name: Copy tiering rule to /tmp/
  ansible.builtin.template:
    src: 'start_tiering_loop.r'
    dest: /tmp/
    mode: 0755
  become: true
  become_user: '{{ ir_service_account }}'
  when: 'check_iqstat.stdout is not search("tiergroup_2")'

- name: Start tiering rule
  ansible.builtin.command: >-
    irule -F /tmp/start_tiering_loop.r
  become_user: '{{ ir_service_account }}'
  become: true
  register: run_tiering_rule
  failed_when: run_tiering_rule.rc != 0
  when: 'check_iqstat.stdout is not search("tiergroup_2")'

- name: Get all pending rules from the iRODS rule execution list
  ansible.builtin.command: iqstat
  changed_when: false
  become_user: '{{ ir_service_account }}'
  become: true
  register: recheck_iqstat
  failed_when: 'recheck_iqstat.rc != 0 or recheck_iqstat.stdout is not search("tiergroup_2")'
...
