# NHC Configuration File
#
# Lines are in the form "<hostmask>||<check>"
# Hostmask is a glob, /regexp/, or {noderange}
# Comments begin with '#'
#


#######################################################################
###
### NHC Configuration Variables
###
# Explicitly instruct NHC to assume PBS (TORQUE, PBSPro) is the Resource Manager
   * || export NHC_RM=slurm

# Do not mark nodes offline
#   * || export MARK_OFFLINE=0

# Activate debugging mode
#   * || export DEBUG=1

# Set watchdog timer to 15 seconds
#   * || export TIMEOUT=15

# In out-of-band contexts, enable all checks
#   * || export NHC_CHECK_ALL=1

# Run df only for local file systems of type ext4.
# This prevents running df for large shared file systems resulting in
# "NHC: Watchdog timer unable to terminate hung NHC process" errors.
   * || export DFI_FLAGS='-Tiltext4'
   * || export DF_FLAGS='-Tkltext4'

# Use short hostname instead of FQDN to mark nodes online/offline.
# This prevents the
#     "Not sure how to handle node state "" on ..."
# error when machines have FQDN hostnames, but are listed with short names in the SLURM config.
   * || HOSTNAME="$HOSTNAME_S"

#######################################################################
###
### Hardware checks
###
# Set these to your correct socket, core, and thread counts.
   * || check_hw_cpuinfo {{ vcompute_sockets }} {{ vcompute_sockets * vcompute_cores_per_socket }} {{ vcompute_sockets * vcompute_cores_per_socket }}

# Set these to the amount of physical RAM you have (leave the fudge factor).
   * || check_hw_physmem {{ vcompute_real_memory }}MB {{ vcompute_real_memory }}MB 5%

# Check specifically for free physical memory.
   * || check_hw_physmem_free 1MB

# Check for some sort of free memory of either type.
   * || check_hw_mem_free 2GB

# Checks for an active ethernet interfaces.
{% for ethernet_interface in vcompute_ethernet_interfaces %}
   * || check_hw_eth {{ ethernet_interface }}
{% endfor %}

# Check the mcelog daemon for any pending errors.
   * || check_hw_mcelog


#######################################################################
###
### Filesystem checks
###
# All nodes should have their root filesystem mounted read/write.
   * || check_fs_mount_rw -f /

# All nodes should have their /local filesystem mounted read/write.
   * || check_fs_mount_rw -f /local

# Controlling TTYs are a good thing!
   * || check_fs_mount_rw -t devpts -s '/(none|devpts)/' -f /dev/pts

# Make sure the root filesystem doesn't get too full.
   * || check_fs_free / 10%

# Make sure the root filesystem has enough free inodes.
   * || check_fs_ifree / 1k

# Make sure the /var volume doesn't get too full.
   * || check_fs_free /var 5%

# Make sure the /var filesystem has enough free inodes.
   * || check_fs_ifree /var 1k

# The following illustrates how to assert an NFSv3 mount (or any other specific mount option).
#   * || check_fs_mount -s bluearc0:/home -t nfs -o '/(^|,)vers=3(,|$)/' -f /home

# All nodes should have their home filesystem mounted read/write 
# and not on the local system disk, but from a shared storage system instead.
   * || check_fs_mount_rw -f /home -t '/(gpfs|lustre|nfs)/'

# All nodes should have their apps filesystem mounted read only 
# and not on the local system disk, but from a shared storage system instead.
   * || check_fs_mount_ro -f /apps -t '/(gpfs|lustre|nfs)/'

# All nodes should have their tmp filesystems mounted read/write.
{% for lfs_mount in lfs_mounts | selectattr('lfs', 'search', 'tmp[0-9]+$') | list %}
{% for group in lfs_mount.groups %}
   * || check_fs_mount_rw -f /groups/{{ group }}/{{ lfs_mount.lfs }}    -t '/(gpfs|lustre|nfs)/'
{% endfor %}
{% endfor %}

#######################################################################
###
### File/metadata checks
###
# These should always be directories and always be read/write/execute and sticky.
   * || check_file_test -r -w -x -d -k /tmp /var/tmp

# These should always be readable and should never be empty.
   * || check_file_test -r -s /etc/passwd /etc/group

# Assert common properties for /dev/null (which occasionally gets clobbered).
   * || check_file_test -c -r -w /dev/null /dev/zero
   * || check_file_stat -m 0666 -u 0 -g 0 -t 1 -T 3 /dev/null

# Make sure there's daily activity from the syslog.
   * || check_file_stat -n 86520 /var/log/messages

# Validate a couple important accounts in the passwd file.
   * || check_file_contents /etc/passwd "/^root:x:0:0:/" "sshd:*"


#######################################################################
###
### Process checks
###
# Everybody needs sshd running, right?  But don't use -r (restart)!
   * || check_ps_service -u root -S sshd

# The cron daemon is another useful critter...
   * || check_ps_service -r crond

# This is only valid for RHEL6 and similar/newer systems.
   * || check_ps_service -d rsyslogd -r rsyslog

# Double your core count is a good rule of thumb for load average max.
# This should work if you place it after one of the check_hw_*() checks.
   * || check_ps_loadavg $((2*HW_CORES))
