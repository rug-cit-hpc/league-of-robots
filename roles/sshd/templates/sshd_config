#jinja2: trim_blocks:True, lstrip_blocks: True
{% if inventory_hostname in groups['jumphost'] | default([]) or inventory_hostname in groups['data_transfer'] | default([]) %}
#
# Extra ports where sshd will listen in addition to the default 22 must be listed before the default of 22,
# because the geerlingly.security role will modify the last listed Port value
# and we use the geerlingly.security role with the default of 22.
#
Port 443
{% endif %}
Port 22

UseDNS no

#
# Disable protocol version 1
#
Protocol 2

#
# Supported (Host)Key algorithms by order of preference.
# Do not use (EC)DSA keys!
#
HostKey /etc/ssh/ssh_host_ed25519_key
HostCertificate /etc/ssh/ssh_host_ed25519_key-cert.pub
HostKey /etc/ssh/ssh_host_rsa_key
HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub
HostKeyAlgorithms      ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com
PubkeyAcceptedKeyTypes ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com

#
# Supported KEX (Key Exchange) algorithms.
#
KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256

#
# ToDo: All Diffie-Hellman moduli used for diffie-hellman-group-exchange-sha256 should be at least 3072-bit-long
#       See also man moduli. Moduli are stored in file: /etc/ssh/moduli
#       The 5th column of this file contains the length of the moduli.
#       To remove short moduli:
# if [[ ! -e /etc/ssh/moduli.original ]]; then
#     cp /etc/ssh/moduli > /etc/ssh/moduli.original
# fi
# awk '$5 >= 3071' /etc/ssh/moduli.original > /etc/ssh/moduli
#

#
# Supported ciphers.
#
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
#RekeyLimit default none

#
# Supported MAC (message authentication code) algorithms.
# Ciphers and MACs can be combined in multiple ways,
# but only Encrypt-then-MAC (EtM) should be used.
#
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com

#
# Logging
#
# LogLevel VERBOSE logs user's key fingerprint on login.
# Required to have a clear audit trail of which key was used to log in.
#
SyslogFacility AUTHPRIV
LogLevel VERBOSE

#
# Authentication methods.
#
#  * Never allow direct root login: We have admin users who can sudo.
#    (see users.yml in the league-of-robots repo)
#  * Disable password based auth.
#  * Enable key pair based auth.
#    * Fetch public keys from LDAP
#    * Disable local keys stored in ~/.ssh/ folders except for local admin accounts.
#
UsePAM yes
PermitRootLogin no
PasswordAuthentication no
PermitEmptyPasswords no
GSSAPIAuthentication no
GSSAPICleanupCredentials no
PubkeyAuthentication yes
{% if inventory_hostname in totp.machines | default([]) or
   if inventory_hostname in pam_weblogin.machines | default([]) %}
ChallengeResponseAuthentication yes
AuthenticationMethods publickey,keyboard-interactive
{% else %}
ChallengeResponseAuthentication no
AuthenticationMethods publickey
{% endif %}

#
# Connection settings.
#
X11Forwarding no
ClientAliveInterval 300
LoginGraceTime {{ sshd_login_grace_time }}
MaxSessions {{ sshd_max_sessions }}

#
# Override default of no subsystems
# and log sftp level file access that would not be easily logged otherwise.
#
Subsystem sftp /usr/libexec/openssh/sftp-server -f AUTHPRIV -l INFO -u 0027

{% if use_ldap | default(true) | bool %}
#
# Get public keys for regular users from LDAP.
#
  {% if use_sssd | default(false) | bool%}
AuthorizedKeysCommand /usr/libexec/openssh/get_public_keys_from_ldap.bash
  {% else %}
AuthorizedKeysCommand /usr/libexec/openssh/ssh-ldap-wrapper.bash
  {% endif %}
AuthorizedKeysCommandUser nobody
AuthorizedKeysFile /dev/null

#
# Get public keys for admins from local authorized_keys file.
#
Match Group admin
    AuthorizedKeysFile .ssh/authorized_keys
{% else %}
#
# Get public keys for all users from local authorized_keys file.
#
AuthorizedKeysFile .ssh/authorized_keys
{% endif %}

{% if inventory_hostname in groups['cluster'] | default([]) %}
#
# Disable guest and data staging accounts on cluster machines (SAI, DAI, UI, compute nodes).
#
Match all
    DenyGroups {{ data_transfer_only_group }} *guest*
{% elif inventory_hostname in groups['repo'] | default([]) %}
#
# Only allow (local) admin users on repo servers.
#
Match all
    AllowGroups admin
{% elif inventory_hostname in groups['docs'] | default([]) %}
#
# Only allow (local) admin users on documentation servers.
#
Match all
    AllowGroups admin

{% elif inventory_hostname in groups['data_transfer'] | default([]) %}
#
# On data staging servers: Restrict regular users to sftp-only on port 22.
#
Match Group *,!admin,!{{ data_transfer_only_group }} LocalPort 22
    AllowAgentForwarding no
    AllowTcpForwarding no
    PermitTTY no
    ChrootDirectory /groups/
    ForceCommand internal-sftp -f AUTHPRIV -l INFO -u 0027
Match Group {{ data_transfer_only_group }} LocalPort 22
    AllowAgentForwarding no
    AllowTcpForwarding no
    PermitTTY no
    ChrootDirectory /groups/{{ data_transfer_only_group }}/
    ForceCommand internal-sftp -f AUTHPRIV -l INFO -u 0077 -d %u
#
# On data staging servers: Restrict regular users to rsync-only on port 443.
#
Match Group *,!admin,!{{ data_transfer_only_group }} LocalPort 443
    AllowAgentForwarding no
    AllowTcpForwarding no
    PermitTTY no
    ForceCommand /bin/rsync --server --daemon --config=/etc/rsyncd_all_groups.conf .
Match Group {{ data_transfer_only_group }} LocalPort 443
    AllowAgentForwarding no
    AllowTcpForwarding no
    PermitTTY no
    ForceCommand /bin/rsync --server --daemon --config=/etc/rsyncd_data_transfer_only_group.conf .
{% endif %}
