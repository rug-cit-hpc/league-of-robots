---
- name: 'Sanity checks before we start.'
  hosts: all
  any_errors_fatal: true
  gather_facts: false
  become: false
  vars:
    #
    # Disable Ansible's interpretor detection logic,
    # which would fail to use the interpretor from an activated virtual environment.
    #
    ansible_python_interpreter: python
  pre_tasks:
    - name: 'Verify Ansible version meets requirements.'
      ansible.builtin.assert:
        that: "ansible_version.full is version_compare(minimal_ansible_version, '>=')"
        msg: "You must update Ansible to at least {{ minimal_ansible_version }}.x to use this playbook."
      vars:
        minimal_ansible_version: 2.13
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: 'Verify that we are running inside a Python virtual environment before we try to fetch dependencies from Ansible Galaxy.'
      ansible.builtin.assert:
        that: lookup('ansible.builtin.env', 'VIRTUAL_ENV', default=Undefined) is defined
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: 'Verify that collections and roles will be installed inside our Python virtual environment before we try to fetch dependencies from Ansible Galaxy.'
      ansible.builtin.assert:
        that: lookup('ansible.builtin.env', item, default=Undefined) is defined
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
      loop:
        - ANSIBLE_ROLES_PATH
        - ANSIBLE_COLLECTIONS_PATH
    - name: 'Verify that the group_vars were parsed.'
      ansible.builtin.assert:
        that: stack_name is defined
        msg: "FATAL: the stack_name Ansible variable is undefined, which suggests that the group_vars were not parsed."
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: 'Get the major version of the installed Python openstacksdk module.'
      ansible.builtin.shell:
        cmd: |
             set -o pipefail
             pip show openstacksdk | fgrep -i Version | awk '{print $2}' | grep -o '^[0-9]*'
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
      register: openstacksdk_major_version
      changed_when: false
    - name: 'Download dependencies from Ansible Galaxy on the Ansible control host.'
      ansible.builtin.command:
        cmd: |
             ansible-galaxy install
                            -r requirements-{{ openstacksdk_major_version.stdout }}.yml
                            {% if ansible_version.full is version_compare('2.14', '>=') %} --timeout 120{% endif %}
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
      register: resolved_dependencies
      changed_when: "'installed successfully' in resolved_dependencies.stdout"
      retries: 3
      delay: 10
      until: resolved_dependencies is not failed
    - name: 'Find the path to ansible_builtin_runtime.yml'
      ansible.builtin.find:
        path: "{{ lookup('ansible.builtin.env', 'VIRTUAL_ENV') }}"
        pattern: 'ansible_builtin_runtime.yml'
        recurse: true
      register: find_ansible_builtin_runtime_result
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: 'Report the found path to the ansible_builtin_runtime.yml config.'
      ansible.builtin.debug:
        msg: "INFO: Found {{ find_ansible_builtin_runtime_result.files | map(attribute='path') | first }}"
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: 'Patch ansible_builtin_runtime.yml for missing redirects.'
      ansible.builtin.blockinfile:
        dest: "{{ find_ansible_builtin_runtime_result.files | map(attribute='path') | first }}"
        block: |2
              x509_certificate:
                redirect: community.crypto.x509_certificate
              x509_certificate_info:
                redirect: community.crypto.x509_certificate_info
        marker: '    # {mark} ANSIBLE MANAGED BLOCK - Patched by league-of-robots/single_group_playbooks/pre_deploy_checks.yml.'
        insertafter: '  modules:'
        create: false
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    #
    # Workaround for bugs related to ansible_remote_tmp dir handling by Mitogen.
    # See https://github.com/mitogen-hq/mitogen/issues/632
    # Will patch ..../ansible_mitogen//target.py if Mitogen was installed.
    #
    - name: 'Find the path to target.py'
      ansible.builtin.find:
        path: "{{ lookup('ansible.builtin.env', 'VIRTUAL_ENV') }}"
        pattern: 'target.py'
        recurse: true
      register: find_target_py_result
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: "Report the found path to Mitogen's target.py."
      ansible.builtin.debug:
        msg: "INFO: Found {{ item }}"
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
      loop: "{{ find_target_py_result.files | map(attribute='path') | list }}"
      when: find_target_py_result.files | map(attribute='path') | first is defined
    - name: 'Patch Mitogen to disable noexec check for file system hosting ansible_remote_tmp.'
      ansible.builtin.replace:
        dest: "{{ item }}"
        #             if not os.access(tmp.name, os.X_OK):
        regexp: '^(\s*)if not os\.access\(tmp\.name, os\.X_OK\):$'
        replace: '\1if False:'
        after: 'def\s+is_good_temp_dir'
        backup: true
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
      loop: "{{ find_target_py_result.files | map(attribute='path') | list }}"
      when: find_target_py_result.files | map(attribute='path') | first is defined
    - name: 'Find the path to pulp/squeezer/plugins/module_utils/pulp_glue.py'
      ansible.builtin.find:
        path: "{{ lookup('ansible.builtin.env', 'VIRTUAL_ENV') }}"
        pattern: 'pulp_glue.py'
        recurse: true
      register: find_pulp_glue_py_result
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
    - name: "Report the found path to Pulp Squeezer's pulp_glue.py."
      ansible.builtin.debug:
        msg: "INFO: Found {{ item }}"
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
      loop: "{{ find_pulp_glue_py_result.files | map(attribute='path') | list }}"
      when: find_pulp_glue_py_result.files | map(attribute='path') | first is defined
    - name: 'Patch list of campatible pulp-glue.py versions for Pulp Squeezer 0.0.16.'
      ansible.builtin.replace:
        dest: "{{ item }}"
        regexp: '^(\s*GLUE_VERSION_SPEC = ">=[0-9\.]+,<0.2)[0-9\.]*"$'
        replace: '\g<1>9"'
        backup: true
      run_once: true  # noqa run-once
      delegate_to: localhost
      connection: local
      loop: "{{ find_pulp_glue_py_result.files | map(attribute='path') | list }}"
      when: find_pulp_glue_py_result.files | map(attribute='path') | first is defined
    - name: "Find all ip_addresses.yml files in {{ playbook_dir }}/group_vars/*."
      ansible.builtin.find:
        paths: "{{ playbook_dir }}/group_vars/"
        recurse: true
        patterns: 'ip_addresses.yml'
      delegate_to: localhost
      connection: local
      register: ip_addresses_files
    - name: Include variables from all ip_addresses.yml files.
      ansible.builtin.include_vars:
        file: "{{ item }}"
        name: "{{ item | dirname | basename }}"
      with_items: "{{ ip_addresses_files.files | map(attribute='path') | list }}"
      delegate_to: localhost
      connection: local
...
